name: CI/CD

on:
  push:
    branches: [ main, staging ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, staging ]

permissions:
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    - name: Run tests
      run: |
        cd todo_project
        pytest tests/

  sast:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Perform Bandit Analysis
      uses: PyCQA/bandit-action@v1
      with:
        targets: 'todo_project'

  dependency-check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: 'Task-Manager-using-Flask'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check Report
          path: ${{github.workspace}}/reports

  open-pr-to-staging:
    needs: [test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "dev"
          destination_branch: "staging"
          pr_title: "Merge dev into staging"
          pr_body: "Automated PR to merge dev into staging after successful build and tests."
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    needs: [test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add your staging deployment steps here

  deploy-production:
    needs: [test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to production
      run: |
        echo "Deploy to production environment"