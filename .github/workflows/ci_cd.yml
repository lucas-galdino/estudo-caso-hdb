name: CI/CD

on:
  push:
    branches: [ main, staging ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, staging ]

permissions:
  pull-requests: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/todo-app:${{ github.sha }}

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests in Docker
        run: |
          docker pull ghcr.io/${{ github.repository }}/todo-app:${{ github.sha }}
          docker run --rm ghcr.io/${{ github.repository }}/todo-app:${{ github.sha }} pytest todo_project/tests/

  sast:
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Perform Bandit Analysis
      uses: PyCQA/bandit-action@v1
      with:
        targets: 'todo_project'

  dependency-check:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: 'Task-Manager-using-Flask'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check Report
          path: ${{github.workspace}}/reports
  
  dast:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check Docker status
        run: |
          docker info
          docker ps
      - name: Run Docker container
        run: |
          docker pull ghcr.io/${{ github.repository }}/todo-app:${{ github.sha }}
          docker run -d -p 5000:5000 --name todo-container ghcr.io/${{ github.repository }}/todo-app:${{ github.sha }}
          sleep 20
      - name: Check container status
        run: |
          docker ps
          docker logs todo-container
      - name: Test application accessibility
        run: curl http://localhost:5000 || echo "Failed to access application"
      - name: Run ZAP Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:5000'
          fail_action: false
          cmd_options: '-r zap_report.html'
      - name: Upload ZAP Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-results
          path: zap_report.html
      - name: Stop Docker container
        if: always()
        run: docker stop todo-container

  open-pr-to-staging:
    needs: [build, test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && success()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "dev"
          destination_branch: "staging"
          pr_title: "Merge dev into staging"
          pr_body: "Automated PR to merge dev into staging after successful build and tests."
          github_token: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    needs: [build, test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        # Add your staging deployment steps here

  deploy-production:
    needs: [build, test, sast, dependency-check]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to production
      run: |
        echo "Deploy to production environment"